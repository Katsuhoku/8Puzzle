begin a*_for_npuzzle
    Root <- initial state readed from file

    open <- [Root] // leaf nodes
    closed <- [] // already expanded nodes

    while true do
        while open <> [] do
            X <- board with best evaluation from open

            if X is the goal state
                return path from Root to X
            else if X is in the deepest limit level then
                open <- [X]
                closed <- []
            else
                children <- children of X
                for each child in children do
                    if child is not in the partial path then
                        if child was already in open then
                            if this is a shorter path to the child then // (i.e. is a better evaluation)
                                update child evaluation
                                update child father node as X
                            end if
                        else if child was already in closed then
                            if this is a shorter path to the child
                                move child node from close to open
                                delete the subtree that child had
                                update child father node as X
                            end if
                        else // the child is not in open nor in closed nor in limit
                            evaluate child
                            add child to open at its corresponding place // insertion sort
                        end if
                add X to closed
            end if
        end while
    end while

    return FAIL
end a*_for_npuzzle

begin evaluate
    if component h > 0.2 then
        evaluation <- 4 * tree level + 2 * (component h) ^ 2
    else then
        evaluation <- 0.8 * tree level + 0.2 * (component h)
    return evaluation
end evaluate